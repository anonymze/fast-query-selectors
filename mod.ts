type TagNameElementMap = {
	'a': HTMLAnchorElement,
	'abbr': HTMLElement,
	'address': HTMLElement,
	'area': HTMLAreaElement,
	'article': HTMLElement,
	'aside': HTMLElement,
	'audio': HTMLAudioElement,
	'b': HTMLElement,
	'base': HTMLBaseElement,
	'bdi': HTMLElement,
	'bdo': HTMLElement,
	'blockquote': HTMLQuoteElement,
	'body': HTMLBodyElement,
	'br': HTMLBRElement,
	'button': HTMLButtonElement,
	'canvas': HTMLCanvasElement,
	'caption': HTMLTableCaptionElement,
	'cite': HTMLElement,
	'code': HTMLElement,
	'col': HTMLTableColElement,
	'colgroup': HTMLTableColElement,
	'data': HTMLDataElement,
	'datalist': HTMLDataListElement,
	'dd': HTMLElement,
	'del': HTMLModElement,
	'details': HTMLDetailsElement,
	'dfn': HTMLElement,
	'dialog': HTMLDialogElement,
	'div': HTMLDivElement,
	'dl': HTMLDListElement,
	'dt': HTMLElement,
	'em': HTMLElement,
	'embed': HTMLEmbedElement,
	'fieldset': HTMLFieldSetElement,
	'figcaption': HTMLElement,
	'figure': HTMLElement,
	'footer': HTMLElement,
	'form': HTMLFormElement,
	'h1': HTMLHeadingElement,
	'h2': HTMLHeadingElement,
	'h3': HTMLHeadingElement,
	'h4': HTMLHeadingElement,
	'h5': HTMLHeadingElement,
	'h6': HTMLHeadingElement,
	'head': HTMLHeadElement,
	'header': HTMLElement,
	'hgroup': HTMLElement,
	'hr': HTMLHRElement,
	'html': HTMLHtmlElement,
	'i': HTMLElement,
	'iframe': HTMLIFrameElement,
	'img': HTMLImageElement,
	'input': HTMLInputElement,
	'ins': HTMLModElement,
	'kbd': HTMLElement,
	'label': HTMLLabelElement,
	'legend': HTMLLegendElement,
	'li': HTMLLIElement,
	'link': HTMLLinkElement,
	'main': HTMLElement,
	'map': HTMLMapElement,
	'mark': HTMLElement,
	'meta': HTMLMetaElement,
	'meter': HTMLMeterElement,
	'nav': HTMLElement,
	'noscript': HTMLElement,
	'object': HTMLObjectElement,
	'ol': HTMLOListElement,
	'optgroup': HTMLOptGroupElement,
	'option': HTMLOptionElement,
	'output': HTMLOutputElement,
	'p': HTMLParagraphElement,
	'param': HTMLParamElement,
	'picture': HTMLPictureElement,
	'pre': HTMLPreElement,
	'progress': HTMLProgressElement,
	'q': HTMLQuoteElement,
	'rp': HTMLElement,
	'rt': HTMLElement,
	'ruby': HTMLElement,
	's': HTMLElement,
	'samp': HTMLElement,
	'script': HTMLScriptElement,
	'section': HTMLElement,
	'select': HTMLSelectElement,
	'slot': HTMLSlotElement,
	'small': HTMLElement,
	'source': HTMLSourceElement,
	'span': HTMLSpanElement,
	'strong': HTMLElement,
	'style': HTMLStyleElement,
	'sub': HTMLElement,
	'summary': HTMLElement,
	'sup': HTMLElement,
	'table': HTMLTableElement,
	'tbody': HTMLTableSectionElement,
	'td': HTMLTableCellElement,
	'template': HTMLTemplateElement,
	'textarea': HTMLTextAreaElement,
	'tfoot': HTMLTableSectionElement,
	'th': HTMLTableCellElement,
	'thead': HTMLTableSectionElement,
	'time': HTMLTimeElement,
	'title': HTMLTitleElement,
	'tr': HTMLTableRowElement,
	'track': HTMLTrackElement,
	'u': HTMLElement,
	'ul': HTMLUListElement,
	'var': HTMLElement,
	'video': HTMLVideoElement,
	'wbr': HTMLElement,
};

// we use this trick (string & {}) to still get the auto completion from keyof TagNameElementMap 
// and you can still pass a random string for a classname, id, attribute...
type TupleHTMLElement<T extends keyof TagNameElementMap | (string & {})[]> = {
	[K in keyof T]: T[K] extends keyof TagNameElementMap ? TagNameElementMap[T[K]] | null : HTMLElement | null
};

/**
 * Get multiple HTMLElements from the document
 * @param querySelectors query selectors
 * @returns A array of HTMLElements ordered by the query selectors, if the element is not found the value at this index will be null
 * @example
 * const [div, span, paragraph, nonExistent] = selectors('div', 'span.my-span', '#paragraph', 'non-existent-selector');
 */
export function selectors<T extends (keyof TagNameElementMap | (string & {}))[]>(...querySelectors: T): TupleHTMLElement<T> {
	return querySelectors.map(selector => document.querySelector(selector)) as TupleHTMLElement<T>;
}